/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.jiunjiunma.manning.m1.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class ChargingEvent extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -5973631852963587749L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ChargingEvent\",\"namespace\":\"com.jiunjiunma.manning.m1.avro\",\"fields\":[{\"name\":\"uuid\",\"type\":[\"string\"]},{\"name\":\"charging\",\"type\":[\"int\",\"null\"],\"default\":0},{\"name\":\"charging_source\",\"type\":[\"string\",\"null\"],\"default\":\"utility\"},{\"name\":\"current_capacity\",\"type\":[\"int\",\"null\"],\"default\":0}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<ChargingEvent> ENCODER =
      new BinaryMessageEncoder<ChargingEvent>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<ChargingEvent> DECODER =
      new BinaryMessageDecoder<ChargingEvent>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<ChargingEvent> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<ChargingEvent> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<ChargingEvent> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<ChargingEvent>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this ChargingEvent to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a ChargingEvent from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a ChargingEvent instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static ChargingEvent fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.Object uuid;
  @Deprecated public java.lang.Integer charging;
  @Deprecated public java.lang.CharSequence charging_source;
  @Deprecated public java.lang.Integer current_capacity;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public ChargingEvent() {}

  /**
   * All-args constructor.
   * @param uuid The new value for uuid
   * @param charging The new value for charging
   * @param charging_source The new value for charging_source
   * @param current_capacity The new value for current_capacity
   */
  public ChargingEvent(java.lang.Object uuid, java.lang.Integer charging, java.lang.CharSequence charging_source, java.lang.Integer current_capacity) {
    this.uuid = uuid;
    this.charging = charging;
    this.charging_source = charging_source;
    this.current_capacity = current_capacity;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return uuid;
    case 1: return charging;
    case 2: return charging_source;
    case 3: return current_capacity;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: uuid = value$; break;
    case 1: charging = (java.lang.Integer)value$; break;
    case 2: charging_source = (java.lang.CharSequence)value$; break;
    case 3: current_capacity = (java.lang.Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'uuid' field.
   * @return The value of the 'uuid' field.
   */
  public java.lang.Object getUuid() {
    return uuid;
  }


  /**
   * Sets the value of the 'uuid' field.
   * @param value the value to set.
   */
  public void setUuid(java.lang.Object value) {
    this.uuid = value;
  }

  /**
   * Gets the value of the 'charging' field.
   * @return The value of the 'charging' field.
   */
  public java.lang.Integer getCharging() {
    return charging;
  }


  /**
   * Sets the value of the 'charging' field.
   * @param value the value to set.
   */
  public void setCharging(java.lang.Integer value) {
    this.charging = value;
  }

  /**
   * Gets the value of the 'charging_source' field.
   * @return The value of the 'charging_source' field.
   */
  public java.lang.CharSequence getChargingSource() {
    return charging_source;
  }


  /**
   * Sets the value of the 'charging_source' field.
   * @param value the value to set.
   */
  public void setChargingSource(java.lang.CharSequence value) {
    this.charging_source = value;
  }

  /**
   * Gets the value of the 'current_capacity' field.
   * @return The value of the 'current_capacity' field.
   */
  public java.lang.Integer getCurrentCapacity() {
    return current_capacity;
  }


  /**
   * Sets the value of the 'current_capacity' field.
   * @param value the value to set.
   */
  public void setCurrentCapacity(java.lang.Integer value) {
    this.current_capacity = value;
  }

  /**
   * Creates a new ChargingEvent RecordBuilder.
   * @return A new ChargingEvent RecordBuilder
   */
  public static com.jiunjiunma.manning.m1.avro.ChargingEvent.Builder newBuilder() {
    return new com.jiunjiunma.manning.m1.avro.ChargingEvent.Builder();
  }

  /**
   * Creates a new ChargingEvent RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new ChargingEvent RecordBuilder
   */
  public static com.jiunjiunma.manning.m1.avro.ChargingEvent.Builder newBuilder(com.jiunjiunma.manning.m1.avro.ChargingEvent.Builder other) {
    if (other == null) {
      return new com.jiunjiunma.manning.m1.avro.ChargingEvent.Builder();
    } else {
      return new com.jiunjiunma.manning.m1.avro.ChargingEvent.Builder(other);
    }
  }

  /**
   * Creates a new ChargingEvent RecordBuilder by copying an existing ChargingEvent instance.
   * @param other The existing instance to copy.
   * @return A new ChargingEvent RecordBuilder
   */
  public static com.jiunjiunma.manning.m1.avro.ChargingEvent.Builder newBuilder(com.jiunjiunma.manning.m1.avro.ChargingEvent other) {
    if (other == null) {
      return new com.jiunjiunma.manning.m1.avro.ChargingEvent.Builder();
    } else {
      return new com.jiunjiunma.manning.m1.avro.ChargingEvent.Builder(other);
    }
  }

  /**
   * RecordBuilder for ChargingEvent instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ChargingEvent>
    implements org.apache.avro.data.RecordBuilder<ChargingEvent> {

    private java.lang.Object uuid;
    private java.lang.Integer charging;
    private java.lang.CharSequence charging_source;
    private java.lang.Integer current_capacity;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.jiunjiunma.manning.m1.avro.ChargingEvent.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.uuid)) {
        this.uuid = data().deepCopy(fields()[0].schema(), other.uuid);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.charging)) {
        this.charging = data().deepCopy(fields()[1].schema(), other.charging);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.charging_source)) {
        this.charging_source = data().deepCopy(fields()[2].schema(), other.charging_source);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.current_capacity)) {
        this.current_capacity = data().deepCopy(fields()[3].schema(), other.current_capacity);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
    }

    /**
     * Creates a Builder by copying an existing ChargingEvent instance
     * @param other The existing instance to copy.
     */
    private Builder(com.jiunjiunma.manning.m1.avro.ChargingEvent other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.uuid)) {
        this.uuid = data().deepCopy(fields()[0].schema(), other.uuid);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.charging)) {
        this.charging = data().deepCopy(fields()[1].schema(), other.charging);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.charging_source)) {
        this.charging_source = data().deepCopy(fields()[2].schema(), other.charging_source);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.current_capacity)) {
        this.current_capacity = data().deepCopy(fields()[3].schema(), other.current_capacity);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'uuid' field.
      * @return The value.
      */
    public java.lang.Object getUuid() {
      return uuid;
    }


    /**
      * Sets the value of the 'uuid' field.
      * @param value The value of 'uuid'.
      * @return This builder.
      */
    public com.jiunjiunma.manning.m1.avro.ChargingEvent.Builder setUuid(java.lang.Object value) {
      validate(fields()[0], value);
      this.uuid = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'uuid' field has been set.
      * @return True if the 'uuid' field has been set, false otherwise.
      */
    public boolean hasUuid() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'uuid' field.
      * @return This builder.
      */
    public com.jiunjiunma.manning.m1.avro.ChargingEvent.Builder clearUuid() {
      uuid = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'charging' field.
      * @return The value.
      */
    public java.lang.Integer getCharging() {
      return charging;
    }


    /**
      * Sets the value of the 'charging' field.
      * @param value The value of 'charging'.
      * @return This builder.
      */
    public com.jiunjiunma.manning.m1.avro.ChargingEvent.Builder setCharging(java.lang.Integer value) {
      validate(fields()[1], value);
      this.charging = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'charging' field has been set.
      * @return True if the 'charging' field has been set, false otherwise.
      */
    public boolean hasCharging() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'charging' field.
      * @return This builder.
      */
    public com.jiunjiunma.manning.m1.avro.ChargingEvent.Builder clearCharging() {
      charging = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'charging_source' field.
      * @return The value.
      */
    public java.lang.CharSequence getChargingSource() {
      return charging_source;
    }


    /**
      * Sets the value of the 'charging_source' field.
      * @param value The value of 'charging_source'.
      * @return This builder.
      */
    public com.jiunjiunma.manning.m1.avro.ChargingEvent.Builder setChargingSource(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.charging_source = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'charging_source' field has been set.
      * @return True if the 'charging_source' field has been set, false otherwise.
      */
    public boolean hasChargingSource() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'charging_source' field.
      * @return This builder.
      */
    public com.jiunjiunma.manning.m1.avro.ChargingEvent.Builder clearChargingSource() {
      charging_source = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'current_capacity' field.
      * @return The value.
      */
    public java.lang.Integer getCurrentCapacity() {
      return current_capacity;
    }


    /**
      * Sets the value of the 'current_capacity' field.
      * @param value The value of 'current_capacity'.
      * @return This builder.
      */
    public com.jiunjiunma.manning.m1.avro.ChargingEvent.Builder setCurrentCapacity(java.lang.Integer value) {
      validate(fields()[3], value);
      this.current_capacity = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'current_capacity' field has been set.
      * @return True if the 'current_capacity' field has been set, false otherwise.
      */
    public boolean hasCurrentCapacity() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'current_capacity' field.
      * @return This builder.
      */
    public com.jiunjiunma.manning.m1.avro.ChargingEvent.Builder clearCurrentCapacity() {
      current_capacity = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public ChargingEvent build() {
      try {
        ChargingEvent record = new ChargingEvent();
        record.uuid = fieldSetFlags()[0] ? this.uuid :  defaultValue(fields()[0]);
        record.charging = fieldSetFlags()[1] ? this.charging : (java.lang.Integer) defaultValue(fields()[1]);
        record.charging_source = fieldSetFlags()[2] ? this.charging_source : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.current_capacity = fieldSetFlags()[3] ? this.current_capacity : (java.lang.Integer) defaultValue(fields()[3]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<ChargingEvent>
    WRITER$ = (org.apache.avro.io.DatumWriter<ChargingEvent>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<ChargingEvent>
    READER$ = (org.apache.avro.io.DatumReader<ChargingEvent>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










